"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuthorizationServerResponse:
    r"""Create a new Authorization Server."""
    
    created_on: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdOn') }})
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    updated_on: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedOn') }})
    audience: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audience'), 'exclude': lambda f: f is None }})
    authorization_code_token_expiration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationCodeTokenExpiration'), 'exclude': lambda f: f is None }})
    client_credentials_token_expiration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCredentialsTokenExpiration'), 'exclude': lambda f: f is None }})
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    server_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverUrl'), 'exclude': lambda f: f is None }})
    