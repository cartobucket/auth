/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.cartobucket.auth.api;

import com.cartobucket.auth.api.utils.HTTPClient;
import com.cartobucket.auth.api.utils.HTTPRequest;
import com.cartobucket.auth.api.utils.JSON;
import com.cartobucket.auth.api.utils.SerializedBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;

/**
 * Applications are used for Server to Server communication. Each Application has a set of Scopes. An ApplicationSecret can be created for each Server and the ApplicationSecret can have the same set of Scopes as the Application, or a subset.
 */
public class Applications {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Applications(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    public com.cartobucket.auth.api.models.operations.CreateApplicationResponse createApplication(com.cartobucket.auth.api.models.shared.ApplicationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(baseUrl, "/applications/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = com.cartobucket.auth.api.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.CreateApplicationResponse res = new com.cartobucket.auth.api.models.operations.CreateApplicationResponse(contentType, httpRes.statusCode()) {{
            applicationResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ApplicationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ApplicationResponse.class);
                res.applicationResponse = out;
            }
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.CreateApplicationSecretResponse createApplicationSecret(com.cartobucket.auth.api.models.operations.CreateApplicationSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(com.cartobucket.auth.api.models.operations.CreateApplicationSecretRequest.class, baseUrl, "/applications/{applicationId}/secrets/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = com.cartobucket.auth.api.utils.Utils.serializeRequestBody(request, "applicationSecretRequest", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.CreateApplicationSecretResponse res = new com.cartobucket.auth.api.models.operations.CreateApplicationSecretResponse(contentType, httpRes.statusCode()) {{
            applicationSecretResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ApplicationSecretResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ApplicationSecretResponse.class);
                res.applicationSecretResponse = out;
            }
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.DeleteApplicationResponse deleteApplication(com.cartobucket.auth.api.models.operations.DeleteApplicationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(com.cartobucket.auth.api.models.operations.DeleteApplicationRequest.class, baseUrl, "/applications/{applicationId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.DeleteApplicationResponse res = new com.cartobucket.auth.api.models.operations.DeleteApplicationResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.DeleteApplicationSecretResponse deleteApplicationSecret(com.cartobucket.auth.api.models.operations.DeleteApplicationSecretRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(com.cartobucket.auth.api.models.operations.DeleteApplicationSecretRequest.class, baseUrl, "/applications/{applicationId}/secrets/{secretId}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.DeleteApplicationSecretResponse res = new com.cartobucket.auth.api.models.operations.DeleteApplicationSecretResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.GetApplicationResponse getApplication(com.cartobucket.auth.api.models.operations.GetApplicationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(com.cartobucket.auth.api.models.operations.GetApplicationRequest.class, baseUrl, "/applications/{applicationId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.GetApplicationResponse res = new com.cartobucket.auth.api.models.operations.GetApplicationResponse(contentType, httpRes.statusCode()) {{
            applicationResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ApplicationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ApplicationResponse.class);
                res.applicationResponse = out;
            }
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.ListApplicationSecretsResponse listApplicationSecrets(com.cartobucket.auth.api.models.operations.ListApplicationSecretsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(com.cartobucket.auth.api.models.operations.ListApplicationSecretsRequest.class, baseUrl, "/applications/{applicationId}/secrets/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.ListApplicationSecretsResponse res = new com.cartobucket.auth.api.models.operations.ListApplicationSecretsResponse(contentType, httpRes.statusCode()) {{
            applicationSecretsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ApplicationSecretsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ApplicationSecretsResponse.class);
                res.applicationSecretsResponse = out;
            }
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.ListApplicationsResponse listApplications(com.cartobucket.auth.api.models.operations.ListApplicationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(baseUrl, "/applications/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = com.cartobucket.auth.api.utils.Utils.getQueryParams(com.cartobucket.auth.api.models.operations.ListApplicationsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.ListApplicationsResponse res = new com.cartobucket.auth.api.models.operations.ListApplicationsResponse(contentType, httpRes.statusCode()) {{
            applicationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ApplicationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ApplicationsResponse.class);
                res.applicationsResponse = out;
            }
        }

        return res;
    }
}