/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.cartobucket.auth.api;

import com.cartobucket.auth.api.utils.HTTPClient;
import com.cartobucket.auth.api.utils.HTTPRequest;
import com.cartobucket.auth.api.utils.JSON;
import com.cartobucket.auth.api.utils.SerializedBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;

/**
 * Clients are used to initiate and Authorization Code Flow. Currently only Username/Password logins are available.
 */
public class Clients {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Clients(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    public com.cartobucket.auth.api.models.operations.CreateClientResponse createClient(com.cartobucket.auth.api.models.shared.ClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(baseUrl, "/clients/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = com.cartobucket.auth.api.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.CreateClientResponse res = new com.cartobucket.auth.api.models.operations.CreateClientResponse(contentType, httpRes.statusCode()) {{
            clientResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ClientResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ClientResponse.class);
                res.clientResponse = out;
            }
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.DeleteClientResponse deleteClient(com.cartobucket.auth.api.models.operations.DeleteClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(com.cartobucket.auth.api.models.operations.DeleteClientRequest.class, baseUrl, "/clients/{clientId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.DeleteClientResponse res = new com.cartobucket.auth.api.models.operations.DeleteClientResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.GetClientResponse getClient(com.cartobucket.auth.api.models.operations.GetClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(com.cartobucket.auth.api.models.operations.GetClientRequest.class, baseUrl, "/clients/{clientId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.GetClientResponse res = new com.cartobucket.auth.api.models.operations.GetClientResponse(contentType, httpRes.statusCode()) {{
            clientResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ClientResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ClientResponse.class);
                res.clientResponse = out;
            }
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.ListClientsResponse listClients(com.cartobucket.auth.api.models.operations.ListClientsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(baseUrl, "/clients/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = com.cartobucket.auth.api.utils.Utils.getQueryParams(com.cartobucket.auth.api.models.operations.ListClientsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.ListClientsResponse res = new com.cartobucket.auth.api.models.operations.ListClientsResponse(contentType, httpRes.statusCode()) {{
            clientsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ClientsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ClientsResponse.class);
                res.clientsResponse = out;
            }
        }

        return res;
    }

    public com.cartobucket.auth.api.models.operations.UpdateClientResponse updateClient(com.cartobucket.auth.api.models.operations.UpdateClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = com.cartobucket.auth.api.utils.Utils.generateURL(com.cartobucket.auth.api.models.operations.UpdateClientRequest.class, baseUrl, "/clients/{clientId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = com.cartobucket.auth.api.utils.Utils.serializeRequestBody(request, "clientRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.cartobucket.auth.api.models.operations.UpdateClientResponse res = new com.cartobucket.auth.api.models.operations.UpdateClientResponse(contentType, httpRes.statusCode()) {{
            clientResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.cartobucket.auth.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.cartobucket.auth.api.models.shared.ClientResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.cartobucket.auth.api.models.shared.ClientResponse.class);
                res.clientResponse = out;
            }
        }

        return res;
    }
}