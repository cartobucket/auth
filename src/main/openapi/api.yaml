---
openapi: 3.0.2
info:
  title: Cartobucket Auth
  version: 1.0.0
  description: OAuth 2.1/OIDC Server.
  contact:
    name: Bryce Groff
    url: https://github.com/cartobucket/auth
    email: brycegroff@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /applications/:
    get:
      tags:
        - Applications
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsResponse'
          description: Get Applications
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationRequest'
      tags:
        - Applications
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
          description: Create Application
  /applications/{applicationId}:
    get:
      tags:
        - Applications
      parameters:
        - name: applicationId
          schema:
            format: UUID
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
          description: Get Application
    delete:
      tags:
        - Applications
      parameters:
        - name: applicationId
          schema:
            format: UUID
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Application Deleted
        "404":
          description: Application Not Found
  /applications/{applicationId}/secrets/:
    get:
      tags:
        - Applications
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSecretsResponse'
          description: List the secrets
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationSecretRequest'
      tags:
        - Applications
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSecretResponse'
          description: Create an application secret
    parameters:
      - name: applicationId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /applications/{applicationId}/secrets/{secretId}/:
    delete:
      tags:
        - Applications
      responses:
        "204":
          description: Delete secret
    parameters:
      - name: applicationId
        schema:
          format: UUID
          type: string
        in: path
        required: true
      - name: secretId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /clients:
    get:
      tags:
        - Clients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsResponse'
          description: Gets a list of clients.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
        required: true
      tags:
        - Clients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
          description: Creates a new client.
  /clients/{clientId}:
    get:
      tags:
        - Clients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
          description: Get the client.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
        required: true
      tags:
        - Clients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
          description: Update the whole client.
    delete:
      tags:
        - Clients
      responses:
        "200":
          description: Delete the client.
    parameters:
      - name: clientId
        description: The clientId of the resource.
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /authorizationServers/:
    get:
      tags:
        - AuthorizationServers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServersResponse'
          description: Get a list of the authorization servers.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerRequest'
        required: true
      tags:
        - AuthorizationServers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerResponse'
          description: Create a new Authorization Server.
  /authorizationServers/{authorizationServerId}:
    get:
      tags:
        - AuthorizationServers
      parameters:
        - name: authorizationServerId
          schema:
            format: UUID
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerResponse'
          description: Get an Authorization Server.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerRequest'
        required: true
      tags:
        - AuthorizationServers
      parameters:
        - name: authorizationServerId
          schema:
            format: UUID
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerResponse'
          description: Update the full body of an Authorization Server.
    delete:
      tags:
        - AuthorizationServers
      parameters:
        - name: authorizationServerId
          schema:
            format: UUID
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Delete an Authorization Server.
  /users/:
    get:
      tags:
        - Users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: Get a list of User.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      tags:
        - Users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Create a User.
  /{authorizationServerId}/.well-known/openid-connect/:
    get:
      tags:
        - WellKnown
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WellKnown'
          description: Returns a well-known configuration object.
      summary: Well Known Endpoint
    parameters:
      - name: authorizationServerId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /{authorizationServerId}/authorization/:
    get:
      tags:
        - AuthorizationServer
      parameters:
        - name: response_type
          description: Value MUST be set to code.
          schema:
            type: string
          in: query
          required: true
        - name: client_id
          description: The client identifier as described in Section 2.2.
          schema:
            type: string
          in: query
          required: true
        - name: redirect_uri
          description: As described in Section 3.1.2.
          schema:
            type: string
          in: query
        - name: scope
          description: The scope of the access request as described by Section 3.3.
          schema:
            type: string
          in: query
        - name: state
          description: An opaque value used by the client to maintain state between
            the request and callback. The authorization server includes this value when
            redirecting the user-agent back to the client. The parameter SHOULD be used
            for preventing cross-site request forgery as described in Section 10.12.
          schema:
            type: string
          in: query
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: Login screen
      summary: Authorization Endpoint
    parameters:
      - name: authorizationServerId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /{authorizationServerId}/end_session/:
    parameters:
      - name: authorizationServerId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /{authorizationServerId}/issuer/:
    parameters:
      - name: authorizationServerId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /{authorizationServerId}/jwks/:
    summary: JWKS
    description: JWKS
    get:
      tags:
        - AuthorizationServer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'
          description: JWKS
      summary: JWKS
    parameters:
      - name: authorizationServerId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /{authorizationServerId}/token/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenRequest'
        required: true
        x-validator: '@ValidAccessTokenRequest'
      tags:
        - AuthorizationServer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
          description: Get an Access Token
      summary: Token Endpoint
    parameters:
      - name: authorizationServerId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /{authorizationServerId}/userinfo/:
    summary: Get userinfo
    get:
      tags:
        - AuthorizationServer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Get userinfo
      summary: User Info
    parameters:
      - name: authorizationServerId
        schema:
          format: UUID
          type: string
        in: path
        required: true
      - name: Authorization
        description: ""
        schema:
          type: string
        in: header
        required: true
  /users/{userId}:
    get:
      tags:
        - Users
      parameters:
        - name: userId
          schema:
            format: UUID
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Get a User.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      tags:
        - Users
      parameters:
        - name: userId
          schema:
            format: UUID
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Update a User.
    delete:
      tags:
        - Users
      parameters:
        - name: userId
          schema:
            format: UUID
            type: string
          in: path
          required: true
      responses:
        "200":
          description: Delete a User.
components:
  schemas:
    WellKnown:
      title: Root Type for WellKnown
      description: ""
      type: object
      properties:
        issuer:
          format: url
          type: string
        authorization_endpoint:
          format: url
          type: string
        token_endpoint:
          format: url
          type: string
        userinfo_endpoint:
          format: url
          type: string
        revocation_endpoint:
          format: url
          type: string
        jwks_uri:
          format: url
          type: string
        response_types_supported:
          type: array
          items:
            enum:
              - code
              - token
              - code id_token
            type: string
        subject_types_supported:
          type: array
          items:
            enum:
              - public
            type: string
        id_token_signing_alg_values_supported:
          type: array
          items:
            enum:
              - RS256
              - RS512
              - EdDSA
            type: string
        scopes_supported:
          type: array
          items:
            enum:
              - openid
              - email
              - profile
            type: string
        token_endpoint_auth_methods_supported:
          type: array
          items:
            enum:
              - client_secret_post
              - client_secret_basic
            type: string
        claims_supported:
          type: array
          items:
            enum:
              - aud
              - exp
              - family_name
              - given_name
              - iat
              - iss
              - name
              - sub
            type: string
        code_challenge_methods_supported:
          type: array
          items:
            enum:
              - S256
            type: string
        grant_types_supported:
          type: array
          items:
            type: string
      example:
        issuer: https://accounts.example.com
        authorization_endpoint: https://accounts.example.com/authorization_endpoint/
        token_endpoint: https://accounts.example.com/token_endpoint/
        userinfo_endpoint: https://accounts.example.com/userinfo_endpoint/
        jwks_uri: https://accounts.example.com/jwks_uri/
        response_types_supported:
          - code
          - token
          - id_token
          - code token
          - code id_token
          - token id_token
          - code token id_token
          - none
        subject_types_supported:
          - public
        id_token_signing_alg_values_supported:
          - RS256
        scopes_supported:
          - openid
          - email
          - profile
        token_endpoint_auth_methods_supported:
          - client_secret_post
          - client_secret_basic
        claims_supported:
          - aud
          - email
          - email_verified
          - exp
          - family_name
          - given_name
          - iat
          - iss
          - locale
          - name
          - picture
          - sub
        code_challenge_methods_supported:
          - plain
          - S256
        grant_types_supported:
          - authorization_code
          - refresh_token
          - client_credentials
    JWKS:
      title: Root Type for JWKS
      description: ""
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JWK'
      example:
        keys:
          - kid: n7h97O0YMBfLZDCHI60r6GC4VtcLJSK2dfKUVBDbF1w
            kty: RSA
            alg: RS256
            use: sig
            "n": meCAjDZk4scn7XcWZPPeQ9WdgquCjLLADUQuGwZkpmM9c2fRHBK7NNOtUHqDlTDq-lQ-5Sh3JN8ZCn0UcTig_EqEA5JneysnyPXGDmU7xOTiQj0WZ2eriuaLfrByT9pnpvZcyT6RH_L6Heienjiswrt1OC_coqnF7o1d5lAWdJlFhwv39-r4s67TAmNFMPa8tqax2ywLAUK4D1gn6MKmpHrTY4NUUTInIaVtNzaZOVWcXDui4PBLeut5xJZbZyz6QsFnjV_5bS3Wa9F0zcF-Yi6AS2U8CjxoLmvvZglBCDJlnc-srfYw6hwIwQihirp0_-kHUbVNxwgsZj8d_2p6Aw
            e: AQAB
            x5c:
              - MIICozCCAYsCBgGDs3zGNzANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDDApOZHB0Yy10ZXN0MB4XDTIyMTAwNzE3MjU0MloXDTMyMTAwNzE3MjcyMlowFTETMBEGA1UEAwwKTmRwdGMtdGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJnggIw2ZOLHJ+13FmTz3kPVnYKrgoyywA1ELhsGZKZjPXNn0RwSuzTTrVB6g5Uw6vpUPuUodyTfGQp9FHE4oPxKhAOSZ3srJ8j1xg5lO8Tk4kI9Fmdnq4rmi36wck/aZ6b2XMk+kR/y+h3onp44rMK7dTgv3KKpxe6NXeZQFnSZRYcL9/fq+LOu0wJjRTD2vLamsdssCwFCuA9YJ+jCpqR602ODVFEyJyGlbTc2mTlVnFw7ouDwS3rrecSWW2cs+kLBZ41f+W0t1mvRdM3BfmIugEtlPAo8aC5r72YJQQgyZZ3PrK32MOocCMEIoYq6dP/pB1G1TccILGY/Hf9qegMCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAPAAsLeUCIDKzxLjqziMno5rIN/KOKOTiZJoq5ep6u5I8x7Q/5tld9pxrT84A4PFH0lRHVWkG9vVatXiUJFXwR5Hx4UW5E3Zswqs5cWj/8fuDaPJbKsYol8wDGcr0p+E4LySed7ReYo6NQU8v8QXSvBvwUpBk99iYhoNGMqx0p21z7SklqdmE6trWu+rVwyh1bGOTRBFXD3eKp5bRWBwRV58xNwVG+EUBhYM7BIzH73j3Vl1muCHg1oYxiayRuEyuAMSlCTr/QeyLbD6L4JGqiHWpNJQVgyT7U/r/xwQEF1PbmPqduVyJq9RJf06Plg1iWwyOBsB5t8GlhOGOOJIpaQ==
            x5t: xoivC29M-elGM11ifPKDuMShiu0
            x5t#S256: 58mTv9dKrsEmx7n11rR3vDwlLBOdbhUCf4rmUP4vLkI
          - kid: CXPHOcjZ8wTmQaeL0Nao2HIoIrJTOo-pUVBrVW8bGoU
            kty: RSA
            alg: RSA-OAEP
            use: enc
            "n": xl6Rmvd5-FjgfIMbJo61a34qMwxus4TftpYShMo8gxB601u07HvXfX8pMVYufh7fYEZut5tTrqoqSx8GL28imDXRMifoWIayhb-Q_JJFGQMJjx5XTKoGloB_kVXR5-YXDx_siU4qbaKsKd_pH6JD8EHB7w1GaFC3KGi--wfrZyIEJEaxK7CXiXTKLjeQHZ8KVSpPJL4xxloZuS2y-JHKmJRt_pskN4260gl-a4D37V0O6E_e3xBOU5c7M293ibGnH5UR5Ufm7KusUdrYFH6TzhnnkQJDHLtzMdaMatsnfTNS1ZYef8UpZyl0_p8TMvRiwdHazEEWijHAIFCTMfx15w
            e: AQAB
            x5c:
              - MIICozCCAYsCBgGDs3zHpzANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDDApOZHB0Yy10ZXN0MB4XDTIyMTAwNzE3MjU0MloXDTMyMTAwNzE3MjcyMlowFTETMBEGA1UEAwwKTmRwdGMtdGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMZekZr3efhY4HyDGyaOtWt+KjMMbrOE37aWEoTKPIMQetNbtOx7131/KTFWLn4e32BGbrebU66qKksfBi9vIpg10TIn6FiGsoW/kPySRRkDCY8eV0yqBpaAf5FV0efmFw8f7IlOKm2irCnf6R+iQ/BBwe8NRmhQtyhovvsH62ciBCRGsSuwl4l0yi43kB2fClUqTyS+McZaGbktsviRypiUbf6bJDeNutIJfmuA9+1dDuhP3t8QTlOXOzNvd4mxpx+VEeVH5uyrrFHa2BR+k84Z55ECQxy7czHWjGrbJ30zUtWWHn/FKWcpdP6fEzL0YsHR2sxBFooxwCBQkzH8decCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAKG8+o3zKMq5Ge4oliY4ht62zkd//ucoif25sU+8+XgTpz3IIFy47zCGdOhAG0JroqklQY20mKWnJGuWEbwc1ZqON/C/nnw2N2vIi7IHNUCX7+1B8pAcbmYU+FslAdsnJm6lui97gIADA+I7GoM++ovxzKknrTOH8eBSVtHFv/SotMbqLNAHDitb1W4zaO8MFITIwBlnI3n+jvETULeYFeCcFVvsxmsFEOvJZxIyFeWukw+NxyTBJeS5WEmJFMFqE7pkGJvGRl3iPYc/+7tQSNzPL6Wi9PvCzbFF+GpS5LRCTyUE+v+ldxwYnv7oo4zirWZOUxhI4kEOTo48HnItfOw==
            x5t: kN0agfIDCc9Z0NmhpgdYv7-NWVk
            x5t#S256: EgDdxvMIJGHahBN2cbLAbjKfCiTd-hqY9zsKxUt1oV0
    AccessTokenResponse:
      title: Root Type for AccessToken
      description: ""
      type: object
      properties:
        access_token:
          format: JWT
          type: string
        token_type:
          enum:
            - Bearer
          type: string
        refresh_token:
          type: string
        expires_in:
          format: int32
          type: integer
        id_token:
          format: JWT
          type: string
      example:
        access_token: xxxxx.yyyyy.zzzzz
        token_type: Bearer
        refresh_token: 8xLOxBtZp8
        expires_in: 3600
        id_token: xxxxx.yyyyy.zzzzz
    AccessTokenRequest:
      title: Root Type for AccessTokenRequest
      description: ""
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
        grant_type:
          enum:
            - client_credentials
            - authorization_code
          type: string
        code:
          description: ""
          type: string
        redirect_uri:
          description: ""
          type: string
        code_verifier:
          description: ""
          type: string
      example:
        client_id: ""
        client_secret: ""
        grant_type: client_credentials
    ApplicationSecretResponse:
      title: Root Type for ApplicationSecretResponse
      description: ""
      type: object
      properties:
        client_secret:
          type: string
      example:
        client_secret: ""
    ApplicationSecretsResponse:
      title: Root Type for ApplicationSecretsResponse
      description: ""
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          expiration:
            type: string
      example:
        - id: ""
          name: ""
          expiration: ""
    ApplicationSecretRequest:
      title: Root Type for ApplicationSecretRequest
      description: ""
      type: object
      properties:
        expires_in:
          format: int32
          type: integer
        scopes:
          type: array
          items: {}
        name:
          description: ""
          type: string
      example:
        expires_in: 12000
        scopes:
          - test.read
        name: Test Secret
    AuthorizationServerRequest:
      title: Root Type for AuthorizationServerRequest
      description: ""
      type: object
      properties:
        serverUrl:
          type: string
        audience:
          type: string
        clientCredentialsTokenExpiration:
          format: int32
          type: integer
        authorizationCodeTokenExpiration:
          format: int32
          type: integer
      example:
        serverUrl: https://accounts.cartobucket.com
        audience: api://
        clientCredentialsTokenExpiration: 300
        authorizationCodeTokenExpiration: 100
    AuthorizationServerResponse:
      title: Root Type for AuthorizationServerResponse
      description: ""
      type: object
      properties:
        id:
          type: string
        serverUrl:
          type: string
        audience:
          type: string
        clientCredentialsTokenExpiration:
          format: int32
          type: integer
        authorizationCodeTokenExpiration:
          format: int32
          type: integer
      example:
        id: becb7180-4b1e-4f2b-812e-f1b86455725c
        serverUrl: https://accounts.cartobucket.com
        audience: api://
        clientCredentialsTokenExpiration: 300
        authorizationCodeTokenExpiration: 100
    AuthorizationServersResponse:
      title: Root Type for AuthorizationServersResponse
      description: ""
      type: object
      properties:
        authorizationServers:
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationServerResponse'
      example:
        authorizationServers:
          - {}
    JWK:
      title: Root Type for JWK
      description: ""
      type: object
      properties:
        kid:
          type: string
        kty:
          type: string
        alg:
          type: string
        use:
          type: string
        "n":
          type: string
        e:
          type: string
        x5c:
          type: array
          items:
            type: string
        x5t:
          type: string
        x5t#S256:
          type: string
      example:
        kid: n7h97O0YMBfLZDCHI60r6GC4VtcLJSK2dfKUVBDbF1w
        kty: RSA
        alg: RS256
        use: sig
        "n": meCAjDZk4scn7XcWZPPeQ9WdgquCjLLADUQuGwZkpmM9c2fRHBK7NNOtUHqDlTDq-lQ-5Sh3JN8ZCn0UcTig_EqEA5JneysnyPXGDmU7xOTiQj0WZ2eriuaLfrByT9pnpvZcyT6RH_L6Heienjiswrt1OC_coqnF7o1d5lAWdJlFhwv39-r4s67TAmNFMPa8tqax2ywLAUK4D1gn6MKmpHrTY4NUUTInIaVtNzaZOVWcXDui4PBLeut5xJZbZyz6QsFnjV_5bS3Wa9F0zcF-Yi6AS2U8CjxoLmvvZglBCDJlnc-srfYw6hwIwQihirp0_-kHUbVNxwgsZj8d_2p6Aw
        e: AQAB
        x5c:
          - MIICozCCAYsCBgGDs3zGNzANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDDApOZHB0Yy10ZXN0MB4XDTIyMTAwNzE3MjU0MloXDTMyMTAwNzE3MjcyMlowFTETMBEGA1UEAwwKTmRwdGMtdGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJnggIw2ZOLHJ+13FmTz3kPVnYKrgoyywA1ELhsGZKZjPXNn0RwSuzTTrVB6g5Uw6vpUPuUodyTfGQp9FHE4oPxKhAOSZ3srJ8j1xg5lO8Tk4kI9Fmdnq4rmi36wck/aZ6b2XMk+kR/y+h3onp44rMK7dTgv3KKpxe6NXeZQFnSZRYcL9/fq+LOu0wJjRTD2vLamsdssCwFCuA9YJ+jCpqR602ODVFEyJyGlbTc2mTlVnFw7ouDwS3rrecSWW2cs+kLBZ41f+W0t1mvRdM3BfmIugEtlPAo8aC5r72YJQQgyZZ3PrK32MOocCMEIoYq6dP/pB1G1TccILGY/Hf9qegMCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAPAAsLeUCIDKzxLjqziMno5rIN/KOKOTiZJoq5ep6u5I8x7Q/5tld9pxrT84A4PFH0lRHVWkG9vVatXiUJFXwR5Hx4UW5E3Zswqs5cWj/8fuDaPJbKsYol8wDGcr0p+E4LySed7ReYo6NQU8v8QXSvBvwUpBk99iYhoNGMqx0p21z7SklqdmE6trWu+rVwyh1bGOTRBFXD3eKp5bRWBwRV58xNwVG+EUBhYM7BIzH73j3Vl1muCHg1oYxiayRuEyuAMSlCTr/QeyLbD6L4JGqiHWpNJQVgyT7U/r/xwQEF1PbmPqduVyJq9RJf06Plg1iWwyOBsB5t8GlhOGOOJIpaQ==
        x5t: xoivC29M-elGM11ifPKDuMShiu0
        x5t#S256: 58mTv9dKrsEmx7n11rR3vDwlLBOdbhUCf4rmUP4vLkI
    ClientRequest:
      title: Root Type for ClientRequest
      description: ""
      type: object
      properties:
        name:
          type: string
        authorizationServerId:
          type: string
        redirectUris:
          type: array
          items:
            type: string
      example:
        name: Test Client
        authorizationServerId: 66a2270e-0385-4aa4-a2ce-79bb12fa16ff
        redirectUris:
          - https://accounts.cartobucket.com
    ClientResponse:
      title: Root Type for ClientResponse
      description: ""
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        authorizationServerId:
          type: string
        redirectUris:
          type: array
          items:
            type: string
        createdOn:
          format: date-time
          type: string
        updatedOn:
          format: date-time
          type: string
      example:
        id: e1d1dc54-4799-4d09-a250-8bff9061419a
        name: Test Client
        authorizationServerId: 66a2270e-0385-4aa4-a2ce-79bb12fa16ff
        redirectUris:
          - https://accounts.cartobucket.com
        createdOn: 2023-01-08T02:05:30+00:00
        updatedOn: 2023-01-08T02:05:30+00:00
    ClientsResponse:
      title: Root Type for ClientsResponse
      description: ""
      type: object
      properties:
        clients:
          type: array
          items:
            $ref: '#/components/schemas/ClientResponse'
      example:
        clients:
          - {}
    ApplicationsResponse:
      title: Root Type for ApplicationsResponse
      description: ""
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationResponse'
      example:
        applications:
          - id: c4d47e35-48bf-45ab-a1a6-8f3e272423f2
            name: Example Application
            client_id: ""
            client_secret: ""
            profile: {}
            createdOn: 2023-01-08T18:49:59+00:00
            updatedOn: 2023-01-08T18:49:59+00:00
    ApplicationRequest:
      title: Root Type for ApplicationRequest
      description: ""
      required:
        - authorizationServerId
        - name
      type: object
      properties:
        name:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        profile:
          type: object
        authorizationServerId:
          format: UUID
          description: ""
          type: string
      example:
        name: Example Application
        client_id: 8743b52063cd84097a65d1633f5c74f5
        client_secret: f0fda58630310a6dd91a7d8f0a4ceda2
        profile: {}
        authorizationServerId: 52a10a2d-080c-4aaa-a184-ec3ba982a9bd
    ApplicationResponse:
      title: Root Type for ApplicationResponse
      description: ""
      required:
        - authorizationServerId
      type: object
      properties:
        id:
          type: string
        authorizationServerId:
          format: UUID
          description: ""
          type: string
        name:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        profile:
          type: object
        createdOn:
          format: date-time
          type: string
        updatedOn:
          format: date-time
          type: string
      example:
        id: c4d47e35-48bf-45ab-a1a6-8f3e272423f2
        name: Example Application
        client_id: ""
        client_secret: ""
        profile: {}
        createdOn: 2023-01-08T18:49:59+00:00
        updatedOn: 2023-01-08T18:49:59+00:00
    UsersResponse:
      title: Root Type for UsersResponse
      description: ""
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
      example:
        users: []
    UserRequest:
      title: Root Type for UserRequest
      description: ""
      type: object
      properties:
        authorizationServerId:
          type: string
        username:
          type: string
        email:
          type: string
        profile:
          type: object
      example:
        authorizationServerId: 100462bc-34fa-4d07-9fa2-88ae04ce4420
        username: test
        email: test@acme.co
        profile:
          firstName: Test
          lastName: Person
    UserResponse:
      title: Root Type for UserResponse
      description: ""
      type: object
      properties:
        id:
          type: string
        authorizationServerId:
          type: string
        username:
          type: string
        email:
          type: string
        profile:
          type: object
        createdOn:
          format: date-time
          type: string
        updatedOn:
          format: date-time
          type: string
      example:
        id: aa97a93f-40de-4aef-92b5-b82f00769240
        authorizationServerId: 100462bc-34fa-4d07-9fa2-88ae04ce4420
        username: test
        email: test@acme.co
        profile:
          firstName: Test
          lastName: Person
        createdOn: 2023-01-09T00:14:02+00:00
        updatedOn: 2023-01-09T00:14:02+00:00