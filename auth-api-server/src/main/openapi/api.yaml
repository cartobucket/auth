openapi: 3.0.2
info:
  title: Cartobucket Auth API
  version: 1.0.0
  description: OAuth 2.1/OIDC Server.
  contact:
    name: Bryce Groff
    url: 'https://github.com/cartobucket/auth'
    email: bryce@cartobucket.com
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'
servers:
  -
    url: 'https://auth.cartobucket.com'
    description: ''
paths:
  /authorizationServers/:
    get:
      tags:
        - AuthorizationServers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServersResponse'
          description: Get a list of the authorization servers.
      operationId: listAuthorizationServers
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerRequest'
        required: true
      tags:
        - AuthorizationServers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerResponse'
          description: Create a new Authorization Server.
      operationId: createAuthorizationServer
  '/authorizationServers/{authorizationServerId}':
    get:
      tags:
        - AuthorizationServers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerResponse'
          description: Get an Authorization Server.
      operationId: getAuthorizationServer
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerRequest'
        required: true
      tags:
        - AuthorizationServers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerResponse'
          description: Update the full body of an Authorization Server.
      operationId: updateAuthorizationServer
    delete:
      tags:
        - AuthorizationServers
      responses:
        '204':
          description: Delete an Authorization Server.
      operationId: deleteAuthorizationServer
    parameters:
      -
        examples:
          authorizationServerId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: authorizationServerId
        schema:
          format: UUID
          type: string
        in: path
        required: true
        x-validator: '@ValidAuthorizationServer'
  /applications/:
    get:
      tags:
        - Applications
      parameters:
        -
          name: authorizationServerIds
          description: ''
          schema:
            type: array
            items:
              format: UUID
              type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsResponse'
          description: Get Applications
      operationId: listApplications
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationRequest'
        required: true
      tags:
        - Applications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
          description: Create Application
      operationId: createApplication
  /users/:
    get:
      tags:
        - Users
      parameters:
        -
          name: authorizationServerIds
          description: ''
          schema:
            type: array
            items:
              format: UUID
              type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
          description: Get a list of User.
      operationId: listUsers
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Create a User.
      operationId: createUser
  /templates/:
    get:
      tags:
        - Templates
      parameters:
        -
          name: authorizationServerIds
          description: ''
          schema:
            type: array
            items:
              format: UUID
              type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'
          description: Gets a list of clients.
      operationId: listTemplates
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateRequest'
        required: true
      tags:
        - Templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'
          description: Creates a new client.
      operationId: createTemplate
  /clients/:
    get:
      tags:
        - Clients
      parameters:
        -
          name: authorizationServerIds
          description: ''
          schema:
            type: array
            items:
              format: UUID
              type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsResponse'
          description: Gets a list of clients.
      operationId: listClients
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
        required: true
      tags:
        - Clients
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
          description: Creates a new client.
      operationId: createClient
  /scopes/:
    get:
      tags:
        - Scopes
      parameters:
        -
          name: authorizationServerIds
          description: ''
          schema:
            type: array
            items:
              format: UUID
              type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopesResponse'
          description: Gets a list of clients.
      operationId: listScopes
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeRequest'
        required: true
      tags:
        - Scopes
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeResponse'
          description: Creates a new client.
      operationId: createScope
  '/applications/{applicationId}':
    get:
      tags:
        - Applications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
          description: Get Application
      operationId: getApplication
    delete:
      tags:
        - Applications
      responses:
        '204':
          description: Application Deleted
        '404':
          description: Application Not Found
      operationId: deleteApplication
    parameters:
      -
        examples:
          applicationId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: applicationId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  '/applications/{applicationId}/secrets/':
    get:
      tags:
        - Applications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSecretsResponse'
          description: List the secrets
      operationId: listApplicationSecrets
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationSecretRequest'
      tags:
        - Applications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSecretResponse'
          description: Create an application secret
      operationId: createApplicationSecret
    parameters:
      -
        examples:
          applicationId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: applicationId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  '/applications/{applicationId}/secrets/{secretId}/':
    delete:
      tags:
        - Applications
      responses:
        '204':
          description: Delete secret
      operationId: deleteApplicationSecret
    parameters:
      -
        examples:
          applicationId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: applicationId
        schema:
          format: UUID
          type: string
        in: path
        required: true
      -
        examples:
          secretId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: secretId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  '/clients/{clientId}':
    get:
      tags:
        - Clients
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
          description: Get the client.
      operationId: getClient
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
        required: true
      tags:
        - Clients
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
          description: Update the whole client.
      operationId: updateClient
    delete:
      tags:
        - Clients
      responses:
        '200':
          description: Delete the client.
      operationId: deleteClient
    parameters:
      -
        examples:
          clientId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: clientId
        description: The clientId of the resource.
        schema:
          format: UUID
          type: string
        in: path
        required: true
  '/scopes/{scopeId}/':
    get:
      tags:
        - Scopes
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeResponse'
          description: Get the template.
      operationId: getScope
    delete:
      tags:
        - Scopes
      responses:
        '200':
          description: Delete the template.
      operationId: deleteScope
    parameters:
      -
        examples:
          scopeId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: scopeId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  '/templates/{templateId}/':
    get:
      tags:
        - Templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'
          description: Get the template.
      operationId: getTemplate
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateRequest'
        required: true
      tags:
        - Templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'
          description: Update the whole template.
      operationId: updateTemplate
    delete:
      tags:
        - Templates
      responses:
        '200':
          description: Delete the template.
      operationId: deleteTemplate
    parameters:
      -
        examples:
          templateId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: templateId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  '/users/{userId}':
    get:
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Get a User.
      operationId: getUser
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Update a User.
      operationId: updateUser
    delete:
      tags:
        - Users
      responses:
        '200':
          description: Delete a User.
      operationId: deleteUser
    parameters:
      -
        examples:
          userId:
            value: 99de126f-cb58-4f92-bd80-afbc354c253d
        name: userId
        schema:
          format: UUID
          type: string
        in: path
        required: true
  '/schemas/{schemaId}':
    summary: Path used to manage a single SchemaRequest.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `SchemaRequest`. 
      This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and
      delete tasks, respectively.
    get:
      tags:
        - Schemas
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRequest'
          description: Successful response - returns a single `SchemaRequest`.
      operationId: getSchemaRequest
      summary: Get a SchemaRequest
      description: Gets the details of a single instance of a `SchemaRequest`.
    put:
      requestBody:
        description: Updated `SchemaRequest` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaRequest'
        required: true
      tags:
        - Schemas
      responses:
        '202':
          description: Successful response.
      operationId: updateSchemaRequest
      summary: Update a SchemaRequest
      description: Updates an existing `SchemaRequest`.
    delete:
      tags:
        - Schemas
      responses:
        '204':
          description: Successful response.
      operationId: deleteSchemaRequest
      summary: Delete a SchemaRequest
      description: Deletes an existing `SchemaRequest`.
    parameters:
      -
        name: schemaId
        description: A unique identifier for a `SchemaRequest`.
        schema:
          format: UUID
          type: string
        in: path
        required: true
  /schemas:
    summary: Path used to manage the list of schemarequests.
    description: >-
      The REST endpoint/path used to list and create zero or more `SchemaRequest` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - Schemas
      parameters:
        -
          name: authorizationServerIds
          description: A list of Authorization Servers to filter the results by.
          schema:
            type: array
            items:
              format: UUID
              type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaRequest'
          description: Successful response - returns an array of `SchemaRequest` entities.
      operationId: getSchemaRequests
      summary: List All SchemaRequests
      description: Gets a list of all `SchemaRequest` entities.
    post:
      requestBody:
        description: A new `SchemaRequest` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaRequest'
        required: true
      tags:
        - Schemas
      responses:
        '201':
          description: Successful response.
      operationId: createSchemaRequest
      summary: Create a SchemaRequest
      description: Creates a new instance of a `SchemaRequest`.
components:
  schemas:
    ApplicationSecretRequest:
      title: Root Type for ApplicationSecretRequest
      description: ''
      type: object
      properties:
        expires_in:
          format: int32
          type: integer
        scopes:
          type: string
        name:
          description: ''
          type: string
      example:
        expires_in: 12000
        scopes: test.read test.write
        name: Test Secret
    AuthorizationServerRequest:
      title: Root Type for AuthorizationServerRequest
      description: ''
      required:
        - name
        - audience
        - authorizationCodeTokenExpiration
        - clientCredentialsTokenExpiration
        - serverUrl
      type: object
      properties:
        serverUrl:
          type: string
        audience:
          type: string
        clientCredentialsTokenExpiration:
          format: int32
          type: integer
        authorizationCodeTokenExpiration:
          format: int32
          type: integer
        name:
          description: ''
          type: string
      example:
        name: Test Authorization Server
        serverUrl: 'https://accounts.cartobucket.com'
        audience: 'api://'
        clientCredentialsTokenExpiration: 300
        authorizationCodeTokenExpiration: 100
    AuthorizationServerResponse:
      title: Root Type for AuthorizationServerResponse
      description: ''
      required:
        - name
        - createdOn
        - updatedOn
      type: object
      properties:
        id:
          type: string
        serverUrl:
          type: string
        audience:
          type: string
        clientCredentialsTokenExpiration:
          format: int32
          type: integer
        authorizationCodeTokenExpiration:
          format: int32
          type: integer
        name:
          description: ''
          type: string
        createdOn:
          description: ''
          type: string
        updatedOn:
          description: ''
          type: string
      example:
        id: becb7180-4b1e-4f2b-812e-f1b86455725c
        name: Test Authorization Server
        serverUrl: 'https://accounts.cartobucket.com'
        audience: 'api://'
        clientCredentialsTokenExpiration: 300
        authorizationCodeTokenExpiration: 100
        createdOn: '2023-01-12T02:53:55+00:00'
        updatedOn: '2023-01-12T02:53:55+00:00'
    AuthorizationServersResponse:
      title: Root Type for AuthorizationServersResponse
      description: ''
      type: object
      properties:
        authorizationServers:
          type: array
          items:
            $ref: '#/components/schemas/AuthorizationServerResponse'
      example:
        authorizationServers:
          - {}
    ClientResponse:
      title: Root Type for ClientResponse
      description: ''
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        authorizationServerId:
          type: string
        redirectUris:
          type: array
          items:
            type: string
        createdOn:
          format: date-time
          type: string
        updatedOn:
          format: date-time
          type: string
        scopes:
          description: ''
          type: string
      example:
        id: e1d1dc54-4799-4d09-a250-8bff9061419a
        name: Test Client
        authorizationServerId: 66a2270e-0385-4aa4-a2ce-79bb12fa16ff
        redirectUris:
          - 'https://accounts.cartobucket.com'
        scopes: test.read test.write
        createdOn: '2023-01-08T02:05:30+00:00'
        updatedOn: '2023-01-08T02:05:30+00:00'
    ClientsResponse:
      title: Root Type for ClientsResponse
      description: ''
      type: object
      properties:
        clients:
          type: array
          items:
            $ref: '#/components/schemas/ClientResponse'
      example:
        clients:
          - {}
    ApplicationsResponse:
      title: Root Type for ApplicationsResponse
      description: ''
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationResponse'
      example:
        applications:
          -
            id: c4d47e35-48bf-45ab-a1a6-8f3e272423f2
            name: Example Application
            client_id: ''
            client_secret: ''
            profile: {}
            createdOn: '2023-01-08T18:49:59+00:00'
            updatedOn: '2023-01-08T18:49:59+00:00'
    ApplicationResponse:
      title: Root Type for ApplicationResponse
      description: ''
      required:
        - authorizationServerId
      type: object
      properties:
        id:
          type: string
        authorizationServerId:
          format: UUID
          description: ''
          type: string
        name:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        profile:
          type: object
        createdOn:
          format: date-time
          type: string
        updatedOn:
          format: date-time
          type: string
      example:
        id: c4d47e35-48bf-45ab-a1a6-8f3e272423f2
        name: Example Application
        client_id: ''
        client_secret: ''
        profile: {}
        createdOn: '2023-01-08T18:49:59+00:00'
        updatedOn: '2023-01-08T18:49:59+00:00'
    UsersResponse:
      title: Root Type for UsersResponse
      description: ''
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
      example:
        users: []
    UserResponse:
      title: Root Type for UserResponse
      description: ''
      type: object
      properties:
        id:
          type: string
        authorizationServerId:
          type: string
        username:
          type: string
        email:
          type: string
        profile:
          type: object
        createdOn:
          format: date-time
          type: string
        updatedOn:
          format: date-time
          type: string
      example:
        id: aa97a93f-40de-4aef-92b5-b82f00769240
        authorizationServerId: 100462bc-34fa-4d07-9fa2-88ae04ce4420
        username: test
        email: test@acme.co
        profile:
          firstName: Test
          lastName: Person
        createdOn: '2023-01-09T00:14:02+00:00'
        updatedOn: '2023-01-09T00:14:02+00:00'
    ApplicationSecretsResponse:
      description: ''
      required:
        - applicationSecrets
      type: object
      properties:
        applicationSecrets:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ApplicationSecretResponse'
    ApplicationSecretResponse:
      title: Root Type for ApplicationSecretResponse
      description: ''
      required:
        - name
        - id
      type: object
      properties:
        client_secret:
          type: string
        name:
          description: ''
          type: string
        id:
          format: UUID
          description: ''
          type: string
        expires_in:
          description: ''
          type: integer
      example:
        id: 76f31822-7956-4020-8731-e7a5c557f576
        name: Super Secret
        client_secret: 8743b52063cd84097a65d1633f5c74f5
    AuthorizationRequest:
      title: Root Type for AuthorizationRequest
      description: ''
      required:
        - client_id
        - response_type
      type: object
      properties:
        response_type:
          enum:
            - code
            - client_credentials
          type: string
        client_id:
          type: string
        redirect_uri:
          type: string
        state:
          type: string
        code_challenge:
          type: string
        code_challenge_method:
          enum:
            - S256
          type: string
        scope:
          description: ''
          type: string
        nonce:
          description: ''
          type: string
      example:
        response_type: code
        client_id: 5ae13a6c-6858-4656-ac18-7b0c7401aa52
        redirect_uri: 'https://api.cartobucket.com/callback'
        state: eyJrZXkiOiAiZXhhbXBsZSJ9
        code_challenge: YXNkZjk0cGl1b2gzMjYzCjIxNTYzNTE2MjRyZTM=
        code_challenge_method: S256
    ApplicationRequestFilter:
      title: Root Type for ApplicationRequestFilter
      description: ''
      type: object
      properties:
        authorizationServerIds:
          type: array
          items:
            format: UUID
            type: string
      example:
        authorizationServerIds:
          - f06618ae-0569-4c6c-a0ad-147e07506229
    ClientRequestFilter:
      title: Root Type for ApplicationRequestFilter
      description: ''
      type: object
      properties:
        authorizationServerIds:
          type: array
          items:
            format: UUID
            type: string
      example:
        authorizationServerIds:
          - f06618ae-0569-4c6c-a0ad-147e07506229
    UserRequestFilter:
      title: Root Type for ApplicationRequestFilter
      description: ''
      type: object
      properties:
        authorizationServerIds:
          type: array
          items:
            format: UUID
            type: string
      example:
        authorizationServerIds:
          - f06618ae-0569-4c6c-a0ad-147e07506229
    TemplateTypeEnum:
      description: ''
      enum:
        - login
      type: string
    TemplatesResponse:
      title: Root Type for TemplatesResponse
      description: ''
      type: object
      properties:
        templates:
          type: array
          items:
            $ref: '#/components/schemas/TemplateResponse'
      example:
        templates:
          -
            id: 03557b53-3a05-46f2-a10e-8ea5e95539b2
            templateType: login
            template: >-
              PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8Ym9keT4KCjxoMT5NeSBGaXJzdCBIZWFkaW5nPC9oMT4KCjxwPk15IGZpcnN0IHBhcmFncmFwaC48L3A+Cgo8L2JvZHk+CjwvaHRtbD4KCg==
            createdOn: '2023-01-13T02:58:12+00:00'
            updatedOn: '2023-01-13T02:58:12+00:00'
    TemplateRequestFilter:
      title: Root Type for ApplicationRequestFilter
      description: ''
      type: object
      properties:
        authorizationServerIds:
          type: array
          items:
            format: UUID
            type: string
      example:
        authorizationServerIds:
          - f06618ae-0569-4c6c-a0ad-147e07506229
    TemplateResponse:
      title: Root Type for TemplateResponse
      description: ''
      type: object
      properties:
        id:
          type: string
        authorizationServerId:
          format: UUID
          description: ''
          type: string
        templateType:
          type: string
        template:
          format: bytes
          type: string
        createdOn:
          format: date-time
          type: string
        updatedOn:
          format: date-time
          type: string
      example:
        id: 03557b53-3a05-46f2-a10e-8ea5e95539b2
        templateType: login
        template: >-
          PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8Ym9keT4KCjxoMT5NeSBGaXJzdCBIZWFkaW5nPC9oMT4KCjxwPk15IGZpcnN0IHBhcmFncmFwaC48L3A+Cgo8L2JvZHk+CjwvaHRtbD4KCg==
        createdOn: '2023-01-13T02:58:12+00:00'
        updatedOn: '2023-01-13T02:58:12+00:00'
    ScopeResponse:
      title: Root Type for TemplateResponse
      description: ''
      type: object
      properties:
        id:
          type: string
        authorizationServerId:
          format: UUID
          description: ''
          type: string
        createdOn:
          format: date-time
          type: string
        updatedOn:
          format: date-time
          type: string
        name:
          type: string
      example:
        id: 03557b53-3a05-46f2-a10e-8ea5e95539b2
        name: test_scope
        createdOn: '2023-01-13T02:58:12+00:00'
        updatedOn: '2023-01-13T02:58:12+00:00'
    ScopesResponse:
      title: Root Type for TemplatesResponse
      description: ''
      required:
        - scopes
      type: object
      properties:
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeResponse'
      example:
        scopes:
          -
            id: 03557b53-3a05-46f2-a10e-8ea5e95539b2
            name: test_scope
            createdOn: '2023-01-13T02:58:12+00:00'
            updatedOn: '2023-01-13T02:58:12+00:00'
    ScopeRequestFilter:
      title: Root Type for ApplicationRequestFilter
      description: ''
      type: object
      properties:
        authorizationServerIds:
          type: array
          items:
            format: UUID
            type: string
      example:
        authorizationServerIds:
          - f06618ae-0569-4c6c-a0ad-147e07506229
    SchemaResponse:
      title: Root Type for SchemaRequest
      description: SchemaRequest
      required:
        - id
        - schema
        - name
        - authorizationServer
        - schemaVersion
      type: object
      properties:
        authorizationServer:
          format: UUID
          type: string
        name:
          type: string
        schemaVersion:
          type: string
        schema:
          type: object
        id:
          format: UUID
          description: ''
          type: string
      example:
        id: 4d0eb4c0-4847-474b-a7e9-7e14ea22329d
        authorizationServer: c55c4197-146d-40eb-9f87-6cec80deac18
        name: OpenID Connect Standard Claims
        schemaVersion: 'https://json-schema.org/draft/2020-12/schema'
        schema:
          $schema: 'https://json-schema.org/draft/2020-12/schema'
          title: OpenID Connect Standard Claims
          type: object
          additionalProperties: true
          properties:
            name:
              type: string
              description: The full name of the end-user
            given_name:
              type: string
              description: The given name of the end-user
            family_name:
              type: string
              description: The family name of the end-user
            middle_name:
              type: string
              description: The middle name of the end-user
            nickname:
              type: string
              description: The nickname of the end-user
            preferred_username:
              type: string
              description: The preferred username of the end-user
            profile:
              type: string
              description: The URL of the end-user's profile page
            picture:
              type: string
              description: The URL of the end-user's profile picture
            website:
              type: string
              description: The URL of the end-user's website
            email:
              type: string
              description: The email address of the end-user
            email_verified:
              type: boolean
              description: Whether the end-user's email address has been verified
            gender:
              type: string
              description: The end-user's gender
            birthdate:
              type: string
              format: date
              description: The end-user's birthdate
            zoneinfo:
              type: string
              description: The end-user's time zone
            locale:
              type: string
              description: The end-user's locale
            phone_number:
              type: string
              description: The end-user's phone number
            phone_number_verified:
              type: boolean
              description: Whether the end-user's phone number has been verified
            address:
              type: object
              description: The end-user's address
              additionalProperties: true
              properties:
                formatted:
                  type: string
                  description: 'The full address, formatted for display'
                street_address:
                  type: string
                  description: The street address
                locality:
                  type: string
                  description: The city or locality
                region:
                  type: string
                  description: The state or region
                postal_code:
                  type: string
                  description: The postal code
                country:
                  type: string
                  description: The country
            updated_at:
              type: integer
              description: When the end-user's information was last updated
    SchemaRequestFilter:
      title: Root Type for ApplicationRequestFilter
      description: ''
      type: object
      properties:
        authorizationServerIds:
          type: array
          items:
            format: UUID
            type: string
      example:
        authorizationServerIds:
          - f06618ae-0569-4c6c-a0ad-147e07506229
    SchemasResponse:
      title: Root Type for SchemasResponse
      description: ''
      required:
        - schemas
      type: object
      properties:
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaResponse'
      example:
        scopes:
          -
            id: 4d0eb4c0-4847-474b-a7e9-7e14ea22329d
            authorizationServer: c55c4197-146d-40eb-9f87-6cec80deac18
            name: OpenID Connect Standard Claims
            schemaVersion: 'https://json-schema.org/draft/2020-12/schema'
            schema:
              $schema: 'https://json-schema.org/draft/2020-12/schema'
              title: OpenID Connect Standard Claims
              type: object
              additionalProperties: true
              properties:
                name:
                  type: string
                  description: The full name of the end-user
                given_name:
                  type: string
                  description: The given name of the end-user
                family_name:
                  type: string
                  description: The family name of the end-user
                middle_name:
                  type: string
                  description: The middle name of the end-user
                nickname:
                  type: string
                  description: The nickname of the end-user
                preferred_username:
                  type: string
                  description: The preferred username of the end-user
                profile:
                  type: string
                  description: The URL of the end-user's profile page
                picture:
                  type: string
                  description: The URL of the end-user's profile picture
                website:
                  type: string
                  description: The URL of the end-user's website
                email:
                  type: string
                  description: The email address of the end-user
                email_verified:
                  type: boolean
                  description: Whether the end-user's email address has been verified
                gender:
                  type: string
                  description: The end-user's gender
                birthdate:
                  type: string
                  format: date
                  description: The end-user's birthdate
                zoneinfo:
                  type: string
                  description: The end-user's time zone
                locale:
                  type: string
                  description: The end-user's locale
                phone_number:
                  type: string
                  description: The end-user's phone number
                phone_number_verified:
                  type: boolean
                  description: Whether the end-user's phone number has been verified
                address:
                  type: object
                  description: The end-user's address
                  additionalProperties: true
                  properties:
                    formatted:
                      type: string
                      description: 'The full address, formatted for display'
                    street_address:
                      type: string
                      description: The street address
                    locality:
                      type: string
                      description: The city or locality
                    region:
                      type: string
                      description: The state or region
                    postal_code:
                      type: string
                      description: The postal code
                    country:
                      type: string
                      description: The country
                updated_at:
                  type: integer
                  description: When the end-user's information was last updated
    UserRequest:
      title: Root Type for UserRequest
      description: ''
      type: object
      properties:
        authorizationServerId:
          format: UUID
          type: string
          x-field-extra-annotation: '@ValidAuthorizationServer'
        username:
          type: string
        email:
          type: string
        profile:
          type: object
      example:
        authorizationServerId: 100462bc-34fa-4d07-9fa2-88ae04ce4420
        username: test
        email: test@acme.co
        profile:
          firstName: Test
          lastName: Person
    TemplateRequest:
      title: Root Type for TemplateRequest
      description: ''
      required:
        - templateType
        - template
        - authorizationServerId
      type: object
      properties:
        templateType:
          $ref: '#/components/schemas/TemplateTypeEnum'
        template:
          format: bytes
          type: string
        authorizationServerId:
          format: UUID
          description: ''
          type: string
          x-field-extra-annotation: '@ValidAuthorizationServer'
      example:
        authorizationServerId: 5b4daf7f-48d5-4afb-bd43-7b667b3dc3c8
        templateType: login
        template: >-
          PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8Ym9keT4KCjxoMT5NeSBGaXJzdCBIZWFkaW5nPC9oMT4KCjxwPk15IGZpcnN0IHBhcmFncmFwaC48L3A+Cgo8L2JvZHk+CjwvaHRtbD4KCg==
    ScopeRequest:
      title: Root Type for ClientRequest
      description: ''
      required:
        - name
        - authorizationServerId
      type: object
      properties:
        name:
          type: string
        authorizationServerId:
          format: UUID
          type: string
          x-field-extra-annotation: '@ValidAuthorizationServer'
      example:
        name: test_scope
        authorizationServerId: 66a2270e-0385-4aa4-a2ce-79bb12fa16ff
    SchemaRequest:
      title: Root Type for SchemaRequest
      description: SchemaRequest
      required:
        - authorizationServer
        - name
        - schemaVersion
      type: object
      properties:
        authorizationServer:
          format: UUID
          type: string
          x-field-extra-annotation: '@ValidAuthorizationServer'
        name:
          type: string
        schemaVersion:
          type: string
        schema:
          type: object
      example:
        authorizationServer: c55c4197-146d-40eb-9f87-6cec80deac18
        name: OpenID Connect Standard Claims
        schemaVersion: 'https://json-schema.org/draft/2020-12/schema'
        schema:
          $schema: 'https://json-schema.org/draft/2020-12/schema'
          title: OpenID Connect Standard Claims
          type: object
          additionalProperties: true
          properties:
            name:
              type: string
              description: The full name of the end-user
            given_name:
              type: string
              description: The given name of the end-user
            family_name:
              type: string
              description: The family name of the end-user
            middle_name:
              type: string
              description: The middle name of the end-user
            nickname:
              type: string
              description: The nickname of the end-user
            preferred_username:
              type: string
              description: The preferred username of the end-user
            profile:
              type: string
              description: The URL of the end-user's profile page
            picture:
              type: string
              description: The URL of the end-user's profile picture
            website:
              type: string
              description: The URL of the end-user's website
            email:
              type: string
              description: The email address of the end-user
            email_verified:
              type: boolean
              description: Whether the end-user's email address has been verified
            gender:
              type: string
              description: The end-user's gender
            birthdate:
              type: string
              format: date
              description: The end-user's birthdate
            zoneinfo:
              type: string
              description: The end-user's time zone
            locale:
              type: string
              description: The end-user's locale
            phone_number:
              type: string
              description: The end-user's phone number
            phone_number_verified:
              type: boolean
              description: Whether the end-user's phone number has been verified
            address:
              type: object
              description: The end-user's address
              additionalProperties: true
              properties:
                formatted:
                  type: string
                  description: 'The full address, formatted for display'
                street_address:
                  type: string
                  description: The street address
                locality:
                  type: string
                  description: The city or locality
                region:
                  type: string
                  description: The state or region
                postal_code:
                  type: string
                  description: The postal code
                country:
                  type: string
                  description: The country
            updated_at:
              type: integer
              description: When the end-user's information was last updated
    ClientRequest:
      title: Root Type for ClientRequest
      description: ''
      type: object
      properties:
        name:
          type: string
        authorizationServerId:
          format: UUID
          type: string
          x-field-extra-annotation: '@ValidAuthorizationServer'
        redirectUris:
          type: array
          items:
            type: string
        scopes:
          description: ''
          type: string
      example:
        name: Test Client
        authorizationServerId: 66a2270e-0385-4aa4-a2ce-79bb12fa16ff
        redirectUris:
          - 'https://accounts.cartobucket.com'
        scopes: test.read test.write
    ApplicationRequest:
      title: Root Type for ApplicationRequest
      description: ''
      required:
        - authorizationServerId
        - name
      type: object
      properties:
        name:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        profile:
          type: object
        authorizationServerId:
          format: UUID
          description: ''
          type: string
          x-field-extra-annotation: '@ValidAuthorizationServer'
      example:
        name: Example Application
        client_id: 8743b52063cd84097a65d1633f5c74f5
        client_secret: f0fda58630310a6dd91a7d8f0a4ceda2
        profile: {}
        authorizationServerId: 52a10a2d-080c-4aaa-a184-ec3ba982a9bd
tags:
  -
    name: Applications
    description: >-
      Applications are used for Server to Server communication. Each Application has a set of Scopes. An
      ApplicationSecret can be created for each Server and the ApplicationSecret can have the same set
      of Scopes as the Application, or a subset.
  -
    name: AuthorizationServers
    description: An AuthorizationServer is the top level domain model that grants AccessTokens.
  -
    name: Clients
    description: >-
      Clients are used to initiate and Authorization Code Flow. Currently only Username/Password logins
      are available.
  -
    name: Scopes
    description: >-
      Scopes are a set of tags used to indicate Authorization. Currently only static Scopes are
      supported.
  -
    name: Templates
    description: Templates are used to render information such as the login page.
  -
    name: Users
    description: >-
      Users represent a person entity in the system. The User domain model is used in the Authorization
      Code Flow and can be granted Access Tokens through a Client.
  -
    name: AuthorizationServer
    description: This is where the interaction with the Authorization Server occurs.
  -
    name: Schemas
    description: ''
