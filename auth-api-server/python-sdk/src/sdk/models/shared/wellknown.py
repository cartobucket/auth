"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WellKnownClaimsSupportedEnum(str, Enum):
    AUD = 'aud'
    EXP = 'exp'
    FAMILY_NAME = 'family_name'
    GIVEN_NAME = 'given_name'
    IAT = 'iat'
    ISS = 'iss'
    NAME = 'name'
    SUB = 'sub'

class WellKnownCodeChallengeMethodsSupportedEnum(str, Enum):
    S256 = 'S256'

class WellKnownIDTokenSigningAlgValuesSupportedEnum(str, Enum):
    RS256 = 'RS256'
    RS512 = 'RS512'
    ED_DSA = 'EdDSA'

class WellKnownResponseTypesSupportedEnum(str, Enum):
    CODE = 'code'
    TOKEN = 'token'
    CODE_ID_TOKEN = 'code id_token'

class WellKnownScopesSupportedEnum(str, Enum):
    OPENID = 'openid'
    EMAIL = 'email'
    PROFILE = 'profile'

class WellKnownSubjectTypesSupportedEnum(str, Enum):
    PUBLIC = 'public'

class WellKnownTokenEndpointAuthMethodsSupportedEnum(str, Enum):
    CLIENT_SECRET_POST = 'client_secret_post'
    CLIENT_SECRET_BASIC = 'client_secret_basic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WellKnown:
    r"""Returns a well-known configuration object."""
    
    authorization_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorization_endpoint'), 'exclude': lambda f: f is None }})
    claims_supported: Optional[list[WellKnownClaimsSupportedEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('claims_supported'), 'exclude': lambda f: f is None }})
    code_challenge_methods_supported: Optional[list[WellKnownCodeChallengeMethodsSupportedEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_challenge_methods_supported'), 'exclude': lambda f: f is None }})
    grant_types_supported: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_types_supported'), 'exclude': lambda f: f is None }})
    id_token_signing_alg_values_supported: Optional[list[WellKnownIDTokenSigningAlgValuesSupportedEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_token_signing_alg_values_supported'), 'exclude': lambda f: f is None }})
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuer'), 'exclude': lambda f: f is None }})
    jwks_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwks_uri'), 'exclude': lambda f: f is None }})
    response_types_supported: Optional[list[WellKnownResponseTypesSupportedEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_types_supported'), 'exclude': lambda f: f is None }})
    revocation_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revocation_endpoint'), 'exclude': lambda f: f is None }})
    scopes_supported: Optional[list[WellKnownScopesSupportedEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes_supported'), 'exclude': lambda f: f is None }})
    subject_types_supported: Optional[list[WellKnownSubjectTypesSupportedEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject_types_supported'), 'exclude': lambda f: f is None }})
    token_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_endpoint'), 'exclude': lambda f: f is None }})
    token_endpoint_auth_methods_supported: Optional[list[WellKnownTokenEndpointAuthMethodsSupportedEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_endpoint_auth_methods_supported'), 'exclude': lambda f: f is None }})
    userinfo_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userinfo_endpoint'), 'exclude': lambda f: f is None }})
    